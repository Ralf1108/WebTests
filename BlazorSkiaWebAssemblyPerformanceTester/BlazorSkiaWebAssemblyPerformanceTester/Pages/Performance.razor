@page "/performance"
@using BlazorSkiaWebAssemblyPerformanceTester.Models

<PageTitle>Performance test</PageTitle>

<h1>Performance test</h1>
<h2>SkiaSharp WebAssembly (Software / OpenGL)</h2>

@*https://nerocui.com/2022/01/08/when-blazor-meets-skiasharp/*@
@*https://swharden.com/blog/2021-01-07-blazor-canvas-animated-graphics/*@
@*https://github.com/pwa-builder/pwa-install*@
@*https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages*@

<br/>
<label>OpenGL enabled: @_useOpenGl</label>
<button class="btn btn-primary" @onclick="SwitchEngine">Switch engine</button>

<br/>
<label>Renderloop enabled: @_renderLoop</label>
<button class="btn btn-primary" @onclick="ToggleRenderLoop">Toggle renderloop</button>

<br/>
<label>Balls:</label>
<input placeholder="Enter ball count" value="@_ballField.Count.ToString()" @onchange="@OnBallCountChanged" />
<button class="btn btn-primary" @onclick="AddBalls">Add 500 balls</button>

<div class="container">
    <div class="row">
        <div class="col border rounded p-2 canvas-container" >
            @if (@_useOpenGl)
            {
                <SKGLView 
                    @ref="_skiaViewGl"
                    @onpointerdown="OnPointerDown"
                    @onpointermove="OnPointerMove"
                    @onpointerup="OnPointerUp"
                    IgnorePixelScaling="true"
                    EnableRenderLoop=@_renderLoop
                    OnPaintSurface="OnPaintSurface"/>
            }
            else
            {
                <SKCanvasView
                    @ref="_skiaView"
                    @onpointerdown="OnPointerDown"
                    @onpointermove="OnPointerMove"
                    @onpointerup="OnPointerUp"
                    IgnorePixelScaling="true"
                    EnableRenderLoop=@_renderLoop
                    OnPaintSurface="OnPaintSurface2"/>
            }
        </div>
    </div>
</div>

<label>Source code:</label>
<a href="https://github.com/Ralf1108/WebTests/tree/main/BlazorSkiaWebAssemblyPerformanceTester/BlazorSkiaWebAssemblyPerformanceTester">GitHub</a>

@code {
#pragma warning disable CS8618
    private SKCanvasView _skiaView;
    private SKGLView _skiaViewGl;
#pragma warning restore CS8618

    private bool _useOpenGl = true;
    private bool _renderLoop = true;

    private float _moveOffsetX;
    private float _moveOffsetY;
    private bool _leftButtonPressed;

    private readonly Field _ballField = new();

    private float _fps;
    private int _tickIndex;
    private long _tickSum;
    private readonly long[] _tickList = new long[100];
    private long _lastTick = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();

    protected override void OnInitialized()
    {
        _ballField.Resize(100, 100);
        AddBalls();

        base.OnInitialized();
    }

    private void OnPaintSurface2(SKPaintSurfaceEventArgs e)
    {
        Draw(e.Info, e.Surface);
    }

    private void OnPaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        Draw(e.Info, e.Surface);
    }

    private void OnPointerMove(PointerEventArgs e)
    {
        if (_leftButtonPressed)
        {
            _moveOffsetX = (float)e.OffsetX;
            _moveOffsetY = (float)e.OffsetY;
        }

        Invalidate();
    }

    private void OnPointerDown(PointerEventArgs e)
    {
        if (e.Button == 0)
            _leftButtonPressed = true;
    }

    private void OnPointerUp(PointerEventArgs e)
    {
        if (e.Button == 0)
            _leftButtonPressed = false;
    }

    private void OnBallCountChanged(ChangeEventArgs e)
    {
        if (e.Value is not string s)
            return;

        int.TryParse(s, out var newCount);
        var diff = newCount - _ballField.Count;
        if (diff > 0)
            _ballField.AddRandomBalls(diff);
        else
            _ballField.RemoveRandomBalls(-diff);

        StateHasChanged();
    }

    private void AddBalls()
    {
        _ballField.AddRandomBalls(500);
    }

    private void Draw(SKImageInfo info, SKSurface surface)
    {
        _ballField.Resize(info.Width, info.Height);
        _ballField.StepForward();

    // the canvas and properties
        var canvas = surface.Canvas;

    // make sure the canvas is blank
        canvas.Clear(SKColors.Blue);
        canvas.Translate(_moveOffsetX, _moveOffsetY);

        using var paint = new SKPaint
        {
            IsAntialias = true,
            StrokeWidth = 5f,
    ////StrokeCap = SKStrokeCap.Round,
    //TextAlign = SKTextAlign.Center,
            TextSize = 24,
        };

    // draw the balls
        paint.Color = SKColor.Parse("#003366");
        canvas.DrawRect(0, 0, _ballField.Width, _ballField.Height, paint);

        paint.StrokeWidth = 2;
        paint.Style = SKPaintStyle.StrokeAndFill;
        paint.Color = SKColor.Parse("#00FFFF");
        foreach (var ball in _ballField.Balls)
            canvas.DrawCircle(new SKPoint(ball.X, ball.Y), ball.R, paint);

    // draw the fps counter
        _fps = GetCurrentFps();
        paint.Color = SKColor.Parse("#FF0000");
        canvas.DrawText($"{_fps:00.00}fps", 0, 20, paint);
    }

    private void SwitchEngine()
    {
        _useOpenGl = !_useOpenGl;
        StateHasChanged();
    }

    private void Invalidate()
    {
        if (_useOpenGl)
            _skiaViewGl.Invalidate();
        else
            _skiaView.Invalidate();
    }

    private void ToggleRenderLoop()
    {
        _renderLoop = !_renderLoop;
    }

    private float GetCurrentFps()
    {
        var newTick = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        var delta = newTick - _lastTick;
        _lastTick = newTick;

        _tickSum -= _tickList[_tickIndex];
        _tickSum += delta;
        _tickList[_tickIndex] = delta;

        if (++_tickIndex == _tickList.Length)
            _tickIndex = 0;

        return (float)(1000.0 / ((double)_tickSum / _tickList.Length));
    }

}